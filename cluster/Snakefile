# This is the general Snakefile for running the analysis on the cluster. The Snakefile instructs snakemake on how to perform the analysis, see https://snakemake.readthedocs.io/en/stable/

import datetime
import os
import shutil

localrules: all

start_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
wildcards = glob_wildcards("raw/rawdata/{sample}.czi")

########################################################################
# Rules
########################################################################

runtime_thresh = 2
onsuccess: 
    cmd = "email_endstatus.py --log_file logs/last_run.txt --start_time \"{st}\" --runtime_thresh {rt} --endstate Success".format(st=start_time,rt = runtime_thresh)
    shell(cmd)

onerror: 
    cmd = "email_endstatus.py --log_file logs/last_run.txt --start_time \"{st}\" --runtime_thresh {rt} --endstate Error".format(st=start_time,rt = runtime_thresh)
    shell(cmd)
    
rule all: 
    #Tell snakemake which files it shall create
    input:
        "graphical/projections_pdf",
        expand("stats/2D_contours_stats/{sample}.csv",sample = wildcards.sample)

rule plot_imgs: 
    input: 
        expand("raw/rawdata/{sample}.czi",sample = wildcards.sample)
    output: 
        directory("graphical/projections_pdf")
    params: 
        mem = "100G",
        runtime = "3:0:0"
    threads: 1
    log: 
        "logs/coco_plot_images.txt"    
    shell: 
        "coco_plot_images.py --debug --cores {threads} &> {log}"

rule coco_segment: 
    input: 
        "raw/rawdata/{sample}.czi"
    output: 
        "stats/2D_contours_stats/{sample}.csv"
    params: 
        mem = "15G",
        runtime = "1:0:0"
    log: 
        {"logs/coco_segment/{sample}.txt"}
    shell: 
        "coco_segment_2D.py --debug --raw_file \"{input}\" &> {log}"
